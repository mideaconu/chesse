# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from chesse_backend_api.v1alpha1 import (
    chesse_pb2 as chesse__backend__api_dot_v1alpha1_dot_chesse__pb2,
)


class ChesseBackendServiceStub(object):
    """CheSSE Backend Service."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSimilarPositions = channel.unary_unary(
            "/chesse_backend_api.v1alpha1.ChesseBackendService/GetSimilarPositions",
            request_serializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetSimilarPositionsRequest.SerializeToString,
            response_deserializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetSimilarPositionsResponse.FromString,
        )
        self.GetGame = channel.unary_unary(
            "/chesse_backend_api.v1alpha1.ChesseBackendService/GetGame",
            request_serializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGameRequest.SerializeToString,
            response_deserializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGameResponse.FromString,
        )
        self.GetGames = channel.unary_unary(
            "/chesse_backend_api.v1alpha1.ChesseBackendService/GetGames",
            request_serializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGamesRequest.SerializeToString,
            response_deserializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGamesResponse.FromString,
        )


class ChesseBackendServiceServicer(object):
    """CheSSE Backend Service."""

    def GetSimilarPositions(self, request, context):
        """Fetch a collection of similar chess positions."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetGame(self, request, context):
        """Fetch a chess game."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetGames(self, request, context):
        """Fetch a collection of chess games."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ChesseBackendServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetSimilarPositions": grpc.unary_unary_rpc_method_handler(
            servicer.GetSimilarPositions,
            request_deserializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetSimilarPositionsRequest.FromString,
            response_serializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetSimilarPositionsResponse.SerializeToString,
        ),
        "GetGame": grpc.unary_unary_rpc_method_handler(
            servicer.GetGame,
            request_deserializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGameRequest.FromString,
            response_serializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGameResponse.SerializeToString,
        ),
        "GetGames": grpc.unary_unary_rpc_method_handler(
            servicer.GetGames,
            request_deserializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGamesRequest.FromString,
            response_serializer=chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGamesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "chesse_backend_api.v1alpha1.ChesseBackendService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ChesseBackendService(object):
    """CheSSE Backend Service."""

    @staticmethod
    def GetSimilarPositions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chesse_backend_api.v1alpha1.ChesseBackendService/GetSimilarPositions",
            chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetSimilarPositionsRequest.SerializeToString,
            chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetSimilarPositionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetGame(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chesse_backend_api.v1alpha1.ChesseBackendService/GetGame",
            chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGameRequest.SerializeToString,
            chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetGames(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chesse_backend_api.v1alpha1.ChesseBackendService/GetGames",
            chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGamesRequest.SerializeToString,
            chesse__backend__api_dot_v1alpha1_dot_chesse__pb2.GetGamesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
