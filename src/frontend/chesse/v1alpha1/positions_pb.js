// source: chesse/v1alpha1/positions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.chesse.v1alpha1.ChessPosition', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.ChessPositionRatingStats', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.ChessPositionResultStats', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.ChessPositionStats', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ChessPositionRatingStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.ChessPositionRatingStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ChessPositionRatingStats.displayName = 'proto.chesse.v1alpha1.ChessPositionRatingStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ChessPositionResultStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.ChessPositionResultStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ChessPositionResultStats.displayName = 'proto.chesse.v1alpha1.ChessPositionResultStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ChessPositionStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.ChessPositionStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ChessPositionStats.displayName = 'proto.chesse.v1alpha1.ChessPositionStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ChessPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.ChessPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ChessPosition.displayName = 'proto.chesse.v1alpha1.ChessPosition';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ChessPositionRatingStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ChessPositionRatingStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    avg: jspb.Message.getFieldWithDefault(msg, 2, 0),
    max: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ChessPositionRatingStats}
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ChessPositionRatingStats;
  return proto.chesse.v1alpha1.ChessPositionRatingStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ChessPositionRatingStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ChessPositionRatingStats}
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ChessPositionRatingStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ChessPositionRatingStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAvg();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 min = 1;
 * @return {number}
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ChessPositionRatingStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.setMin = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 avg = 2;
 * @return {number}
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.getAvg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ChessPositionRatingStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.setAvg = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 max = 3;
 * @return {number}
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ChessPositionRatingStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionRatingStats.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ChessPositionResultStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ChessPositionResultStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPositionResultStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    whiteWinPct: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    drawPct: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    blackWinPct: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ChessPositionResultStats}
 */
proto.chesse.v1alpha1.ChessPositionResultStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ChessPositionResultStats;
  return proto.chesse.v1alpha1.ChessPositionResultStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ChessPositionResultStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ChessPositionResultStats}
 */
proto.chesse.v1alpha1.ChessPositionResultStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWhiteWinPct(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDrawPct(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBlackWinPct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ChessPositionResultStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ChessPositionResultStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPositionResultStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWhiteWinPct();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getDrawPct();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getBlackWinPct();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float white_win_pct = 1;
 * @return {number}
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.getWhiteWinPct = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ChessPositionResultStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.setWhiteWinPct = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float draw_pct = 2;
 * @return {number}
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.getDrawPct = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ChessPositionResultStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.setDrawPct = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float black_win_pct = 3;
 * @return {number}
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.getBlackWinPct = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ChessPositionResultStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionResultStats.prototype.setBlackWinPct = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ChessPositionStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ChessPositionStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPositionStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    nrGames: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ratingStats: (f = msg.getRatingStats()) && proto.chesse.v1alpha1.ChessPositionRatingStats.toObject(includeInstance, f),
    resultStats: (f = msg.getResultStats()) && proto.chesse.v1alpha1.ChessPositionResultStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ChessPositionStats}
 */
proto.chesse.v1alpha1.ChessPositionStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ChessPositionStats;
  return proto.chesse.v1alpha1.ChessPositionStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ChessPositionStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ChessPositionStats}
 */
proto.chesse.v1alpha1.ChessPositionStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNrGames(value);
      break;
    case 2:
      var value = new proto.chesse.v1alpha1.ChessPositionRatingStats;
      reader.readMessage(value,proto.chesse.v1alpha1.ChessPositionRatingStats.deserializeBinaryFromReader);
      msg.setRatingStats(value);
      break;
    case 3:
      var value = new proto.chesse.v1alpha1.ChessPositionResultStats;
      reader.readMessage(value,proto.chesse.v1alpha1.ChessPositionResultStats.deserializeBinaryFromReader);
      msg.setResultStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ChessPositionStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ChessPositionStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPositionStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNrGames();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRatingStats();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chesse.v1alpha1.ChessPositionRatingStats.serializeBinaryToWriter
    );
  }
  f = message.getResultStats();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.chesse.v1alpha1.ChessPositionResultStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 nr_games = 1;
 * @return {number}
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.getNrGames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ChessPositionStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.setNrGames = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ChessPositionRatingStats rating_stats = 2;
 * @return {?proto.chesse.v1alpha1.ChessPositionRatingStats}
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.getRatingStats = function() {
  return /** @type{?proto.chesse.v1alpha1.ChessPositionRatingStats} */ (
    jspb.Message.getWrapperField(this, proto.chesse.v1alpha1.ChessPositionRatingStats, 2));
};


/**
 * @param {?proto.chesse.v1alpha1.ChessPositionRatingStats|undefined} value
 * @return {!proto.chesse.v1alpha1.ChessPositionStats} returns this
*/
proto.chesse.v1alpha1.ChessPositionStats.prototype.setRatingStats = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chesse.v1alpha1.ChessPositionStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.clearRatingStats = function() {
  return this.setRatingStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.hasRatingStats = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChessPositionResultStats result_stats = 3;
 * @return {?proto.chesse.v1alpha1.ChessPositionResultStats}
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.getResultStats = function() {
  return /** @type{?proto.chesse.v1alpha1.ChessPositionResultStats} */ (
    jspb.Message.getWrapperField(this, proto.chesse.v1alpha1.ChessPositionResultStats, 3));
};


/**
 * @param {?proto.chesse.v1alpha1.ChessPositionResultStats|undefined} value
 * @return {!proto.chesse.v1alpha1.ChessPositionStats} returns this
*/
proto.chesse.v1alpha1.ChessPositionStats.prototype.setResultStats = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chesse.v1alpha1.ChessPositionStats} returns this
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.clearResultStats = function() {
  return this.setResultStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chesse.v1alpha1.ChessPositionStats.prototype.hasResultStats = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ChessPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ChessPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ChessPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    fenEncoding: jspb.Message.getFieldWithDefault(msg, 1, ""),
    positionStats: (f = msg.getPositionStats()) && proto.chesse.v1alpha1.ChessPositionStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ChessPosition}
 */
proto.chesse.v1alpha1.ChessPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ChessPosition;
  return proto.chesse.v1alpha1.ChessPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ChessPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ChessPosition}
 */
proto.chesse.v1alpha1.ChessPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFenEncoding(value);
      break;
    case 2:
      var value = new proto.chesse.v1alpha1.ChessPositionStats;
      reader.readMessage(value,proto.chesse.v1alpha1.ChessPositionStats.deserializeBinaryFromReader);
      msg.setPositionStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ChessPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ChessPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ChessPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ChessPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFenEncoding();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPositionStats();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chesse.v1alpha1.ChessPositionStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string fen_encoding = 1;
 * @return {string}
 */
proto.chesse.v1alpha1.ChessPosition.prototype.getFenEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.ChessPosition} returns this
 */
proto.chesse.v1alpha1.ChessPosition.prototype.setFenEncoding = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ChessPositionStats position_stats = 2;
 * @return {?proto.chesse.v1alpha1.ChessPositionStats}
 */
proto.chesse.v1alpha1.ChessPosition.prototype.getPositionStats = function() {
  return /** @type{?proto.chesse.v1alpha1.ChessPositionStats} */ (
    jspb.Message.getWrapperField(this, proto.chesse.v1alpha1.ChessPositionStats, 2));
};


/**
 * @param {?proto.chesse.v1alpha1.ChessPositionStats|undefined} value
 * @return {!proto.chesse.v1alpha1.ChessPosition} returns this
*/
proto.chesse.v1alpha1.ChessPosition.prototype.setPositionStats = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chesse.v1alpha1.ChessPosition} returns this
 */
proto.chesse.v1alpha1.ChessPosition.prototype.clearPositionStats = function() {
  return this.setPositionStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chesse.v1alpha1.ChessPosition.prototype.hasPositionStats = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.chesse.v1alpha1);
