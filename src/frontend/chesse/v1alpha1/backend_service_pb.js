// source: chesse/v1alpha1/backend_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var chesse_v1alpha1_games_pb = require('../../chesse/v1alpha1/games_pb.js');
goog.object.extend(proto, chesse_v1alpha1_games_pb);
var chesse_v1alpha1_positions_pb = require('../../chesse/v1alpha1/positions_pb.js');
goog.object.extend(proto, chesse_v1alpha1_positions_pb);
goog.exportSymbol('proto.chesse.v1alpha1.GetChessGameRequest', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.GetChessGameResponse', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.GetChessPositionRequest', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.GetChessPositionResponse', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.ListChessGamesRequest', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.ListChessGamesResponse', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.ListChessPositionsRequest', null, global);
goog.exportSymbol('proto.chesse.v1alpha1.ListChessPositionsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.GetChessPositionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.GetChessPositionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.GetChessPositionRequest.displayName = 'proto.chesse.v1alpha1.GetChessPositionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.GetChessPositionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.GetChessPositionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.GetChessPositionResponse.displayName = 'proto.chesse.v1alpha1.GetChessPositionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ListChessPositionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.ListChessPositionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ListChessPositionsRequest.displayName = 'proto.chesse.v1alpha1.ListChessPositionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ListChessPositionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chesse.v1alpha1.ListChessPositionsResponse.repeatedFields_, null);
};
goog.inherits(proto.chesse.v1alpha1.ListChessPositionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ListChessPositionsResponse.displayName = 'proto.chesse.v1alpha1.ListChessPositionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.GetChessGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.GetChessGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.GetChessGameRequest.displayName = 'proto.chesse.v1alpha1.GetChessGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.GetChessGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.GetChessGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.GetChessGameResponse.displayName = 'proto.chesse.v1alpha1.GetChessGameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ListChessGamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chesse.v1alpha1.ListChessGamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ListChessGamesRequest.displayName = 'proto.chesse.v1alpha1.ListChessGamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chesse.v1alpha1.ListChessGamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chesse.v1alpha1.ListChessGamesResponse.repeatedFields_, null);
};
goog.inherits(proto.chesse.v1alpha1.ListChessGamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chesse.v1alpha1.ListChessGamesResponse.displayName = 'proto.chesse.v1alpha1.ListChessGamesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.GetChessPositionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.GetChessPositionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.GetChessPositionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessPositionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fenEncoding: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.GetChessPositionRequest}
 */
proto.chesse.v1alpha1.GetChessPositionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.GetChessPositionRequest;
  return proto.chesse.v1alpha1.GetChessPositionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.GetChessPositionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.GetChessPositionRequest}
 */
proto.chesse.v1alpha1.GetChessPositionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFenEncoding(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.GetChessPositionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.GetChessPositionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.GetChessPositionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessPositionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFenEncoding();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string fen_encoding = 1;
 * @return {string}
 */
proto.chesse.v1alpha1.GetChessPositionRequest.prototype.getFenEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.GetChessPositionRequest} returns this
 */
proto.chesse.v1alpha1.GetChessPositionRequest.prototype.setFenEncoding = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.GetChessPositionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.GetChessPositionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.GetChessPositionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessPositionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && chesse_v1alpha1_positions_pb.ChessPosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.GetChessPositionResponse}
 */
proto.chesse.v1alpha1.GetChessPositionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.GetChessPositionResponse;
  return proto.chesse.v1alpha1.GetChessPositionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.GetChessPositionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.GetChessPositionResponse}
 */
proto.chesse.v1alpha1.GetChessPositionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chesse_v1alpha1_positions_pb.ChessPosition;
      reader.readMessage(value,chesse_v1alpha1_positions_pb.ChessPosition.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.GetChessPositionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.GetChessPositionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.GetChessPositionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessPositionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chesse_v1alpha1_positions_pb.ChessPosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChessPosition position = 1;
 * @return {?proto.chesse.v1alpha1.ChessPosition}
 */
proto.chesse.v1alpha1.GetChessPositionResponse.prototype.getPosition = function() {
  return /** @type{?proto.chesse.v1alpha1.ChessPosition} */ (
    jspb.Message.getWrapperField(this, chesse_v1alpha1_positions_pb.ChessPosition, 1));
};


/**
 * @param {?proto.chesse.v1alpha1.ChessPosition|undefined} value
 * @return {!proto.chesse.v1alpha1.GetChessPositionResponse} returns this
*/
proto.chesse.v1alpha1.GetChessPositionResponse.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chesse.v1alpha1.GetChessPositionResponse} returns this
 */
proto.chesse.v1alpha1.GetChessPositionResponse.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chesse.v1alpha1.GetChessPositionResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ListChessPositionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ListChessPositionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fenEncoding: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ListChessPositionsRequest}
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ListChessPositionsRequest;
  return proto.chesse.v1alpha1.ListChessPositionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ListChessPositionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ListChessPositionsRequest}
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFenEncoding(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ListChessPositionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ListChessPositionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFenEncoding();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string fen_encoding = 1;
 * @return {string}
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.getFenEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.ListChessPositionsRequest} returns this
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.setFenEncoding = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ListChessPositionsRequest} returns this
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string page_token = 3;
 * @return {string}
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.ListChessPositionsRequest} returns this
 */
proto.chesse.v1alpha1.ListChessPositionsRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ListChessPositionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ListChessPositionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.toObjectList(msg.getPositionsList(),
    chesse_v1alpha1_positions_pb.ChessPosition.toObject, includeInstance),
    totalSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ListChessPositionsResponse}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ListChessPositionsResponse;
  return proto.chesse.v1alpha1.ListChessPositionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ListChessPositionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ListChessPositionsResponse}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chesse_v1alpha1_positions_pb.ChessPosition;
      reader.readMessage(value,chesse_v1alpha1_positions_pb.ChessPosition.deserializeBinaryFromReader);
      msg.addPositions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ListChessPositionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ListChessPositionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      chesse_v1alpha1_positions_pb.ChessPosition.serializeBinaryToWriter
    );
  }
  f = message.getTotalSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated ChessPosition positions = 1;
 * @return {!Array<!proto.chesse.v1alpha1.ChessPosition>}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.getPositionsList = function() {
  return /** @type{!Array<!proto.chesse.v1alpha1.ChessPosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, chesse_v1alpha1_positions_pb.ChessPosition, 1));
};


/**
 * @param {!Array<!proto.chesse.v1alpha1.ChessPosition>} value
 * @return {!proto.chesse.v1alpha1.ListChessPositionsResponse} returns this
*/
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.setPositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chesse.v1alpha1.ChessPosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chesse.v1alpha1.ChessPosition}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.addPositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chesse.v1alpha1.ChessPosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chesse.v1alpha1.ListChessPositionsResponse} returns this
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.clearPositionsList = function() {
  return this.setPositionsList([]);
};


/**
 * optional int32 total_size = 2;
 * @return {number}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.getTotalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ListChessPositionsResponse} returns this
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.setTotalSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string next_page_token = 3;
 * @return {string}
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.ListChessPositionsResponse} returns this
 */
proto.chesse.v1alpha1.ListChessPositionsResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.GetChessGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.GetChessGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.GetChessGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.GetChessGameRequest}
 */
proto.chesse.v1alpha1.GetChessGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.GetChessGameRequest;
  return proto.chesse.v1alpha1.GetChessGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.GetChessGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.GetChessGameRequest}
 */
proto.chesse.v1alpha1.GetChessGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.GetChessGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.GetChessGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.GetChessGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string game_id = 1;
 * @return {string}
 */
proto.chesse.v1alpha1.GetChessGameRequest.prototype.getGameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.GetChessGameRequest} returns this
 */
proto.chesse.v1alpha1.GetChessGameRequest.prototype.setGameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.GetChessGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.GetChessGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.GetChessGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    game: (f = msg.getGame()) && chesse_v1alpha1_games_pb.ChessGame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.GetChessGameResponse}
 */
proto.chesse.v1alpha1.GetChessGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.GetChessGameResponse;
  return proto.chesse.v1alpha1.GetChessGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.GetChessGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.GetChessGameResponse}
 */
proto.chesse.v1alpha1.GetChessGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chesse_v1alpha1_games_pb.ChessGame;
      reader.readMessage(value,chesse_v1alpha1_games_pb.ChessGame.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.GetChessGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.GetChessGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.GetChessGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.GetChessGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chesse_v1alpha1_games_pb.ChessGame.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChessGame game = 1;
 * @return {?proto.chesse.v1alpha1.ChessGame}
 */
proto.chesse.v1alpha1.GetChessGameResponse.prototype.getGame = function() {
  return /** @type{?proto.chesse.v1alpha1.ChessGame} */ (
    jspb.Message.getWrapperField(this, chesse_v1alpha1_games_pb.ChessGame, 1));
};


/**
 * @param {?proto.chesse.v1alpha1.ChessGame|undefined} value
 * @return {!proto.chesse.v1alpha1.GetChessGameResponse} returns this
*/
proto.chesse.v1alpha1.GetChessGameResponse.prototype.setGame = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chesse.v1alpha1.GetChessGameResponse} returns this
 */
proto.chesse.v1alpha1.GetChessGameResponse.prototype.clearGame = function() {
  return this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chesse.v1alpha1.GetChessGameResponse.prototype.hasGame = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ListChessGamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ListChessGamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessGamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fenEncoding: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ListChessGamesRequest}
 */
proto.chesse.v1alpha1.ListChessGamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ListChessGamesRequest;
  return proto.chesse.v1alpha1.ListChessGamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ListChessGamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ListChessGamesRequest}
 */
proto.chesse.v1alpha1.ListChessGamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFenEncoding(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ListChessGamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ListChessGamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessGamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFenEncoding();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string fen_encoding = 1;
 * @return {string}
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.getFenEncoding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.ListChessGamesRequest} returns this
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.setFenEncoding = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ListChessGamesRequest} returns this
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string page_token = 3;
 * @return {string}
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.ListChessGamesRequest} returns this
 */
proto.chesse.v1alpha1.ListChessGamesRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chesse.v1alpha1.ListChessGamesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chesse.v1alpha1.ListChessGamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chesse.v1alpha1.ListChessGamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessGamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamesList: jspb.Message.toObjectList(msg.getGamesList(),
    chesse_v1alpha1_games_pb.ChessGame.toObject, includeInstance),
    totalSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chesse.v1alpha1.ListChessGamesResponse}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chesse.v1alpha1.ListChessGamesResponse;
  return proto.chesse.v1alpha1.ListChessGamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chesse.v1alpha1.ListChessGamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chesse.v1alpha1.ListChessGamesResponse}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chesse_v1alpha1_games_pb.ChessGame;
      reader.readMessage(value,chesse_v1alpha1_games_pb.ChessGame.deserializeBinaryFromReader);
      msg.addGames(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chesse.v1alpha1.ListChessGamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chesse.v1alpha1.ListChessGamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chesse.v1alpha1.ListChessGamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      chesse_v1alpha1_games_pb.ChessGame.serializeBinaryToWriter
    );
  }
  f = message.getTotalSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated ChessGame games = 1;
 * @return {!Array<!proto.chesse.v1alpha1.ChessGame>}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.getGamesList = function() {
  return /** @type{!Array<!proto.chesse.v1alpha1.ChessGame>} */ (
    jspb.Message.getRepeatedWrapperField(this, chesse_v1alpha1_games_pb.ChessGame, 1));
};


/**
 * @param {!Array<!proto.chesse.v1alpha1.ChessGame>} value
 * @return {!proto.chesse.v1alpha1.ListChessGamesResponse} returns this
*/
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.setGamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chesse.v1alpha1.ChessGame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chesse.v1alpha1.ChessGame}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.addGames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chesse.v1alpha1.ChessGame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chesse.v1alpha1.ListChessGamesResponse} returns this
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.clearGamesList = function() {
  return this.setGamesList([]);
};


/**
 * optional int32 total_size = 2;
 * @return {number}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.getTotalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chesse.v1alpha1.ListChessGamesResponse} returns this
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.setTotalSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string next_page_token = 3;
 * @return {string}
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.chesse.v1alpha1.ListChessGamesResponse} returns this
 */
proto.chesse.v1alpha1.ListChessGamesResponse.prototype.setNextPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.chesse.v1alpha1);
