syntax = "proto3";
package chesse.v1alpha1;


// Context of a chess game.
message ChessGameContext {
    // The event in which the game was played, e.g. the name of the tournament.
    string event = 1;
    // The date when the game was played. The format of the date is YYYY.MM.dd.
    string date = 2;
    // The site where the game can be accessed.
    string site = 3;
    // The round the game was played in. Example: 1 (round 1), 1.2 (round 1, 
    // board 2), or null (N/A, such as online games).
    optional float round = 4;
}

// Details about the side playing the white pieces in a chess game.
message White {
    // The name of the side with the white pieces.
    string name = 1;
    // The elo of the side with the white pieces. This can be online, FIDE, or 
    // other national or international rating.
    int32 elo = 2;
}

// Details about the side playing the black pieces in a chess game.
message Black {
    // The name of the side with the black pieces.
    string name = 1;
    // The elo of the side with the black pieces. This can be online, FIDE, or 
    // other national or international rating.
    int32 elo = 2;
}

// Chess move.
message Move {
    // Universal Chess Interface (UCI) encoding of the move. Example: e2e4.
    string uci = 1;
    // Short Algebraic Notation (SAN) encoding of the move. Example: e4.
    string san = 2;
    // Forsythâ€“Edwards Notation (FEN) encoding of the position being reached 
    // after the move is made. Example: 
    // rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1.
    string fen = 3;
}

// Chess game.
message ChessGame {
    // The game ID. 
    string id = 1;
    // The game context.
    chesse.v1alpha1.ChessGameContext context = 2;
    // The side playing white in the game.
    chesse.v1alpha1.White white = 3;
    // The side playing black in the game.
    chesse.v1alpha1.Black black = 4;
    // The moves played in the game.
    repeated chesse.v1alpha1.Move moves = 5;
    // The game result.
    float result = 6;
}
